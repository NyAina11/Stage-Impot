name: CI - Test Stage-Impot

on:
  push:
    branches: [ main, BD ]
  pull_request:
    branches: [ main, BD ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: stage_impot_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          cache-dependency-path: Back-end/package-lock.json

      - name: Install backend dependencies
        run: |
          cd Back-end
          npm ci
      - name: Wait for Postgres to be up
        run: |
          for i in {1..10}; do
            nc -z localhost 5432 && echo "Postgres up" && break
            echo "Waiting for postgres..."
            sleep 3
          done
      - name: Run backend tests
        env:
          DATABASE_URL: "postgres://testuser:testpassword@localhost:5432/stage_impot_test"
        run: |
          cd Back-end
          npm test
      - name: Build backend Docker image
        run: |
          docker build -t stage-impot-backend:ci-test ./Back-end
  frontend-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: Front-end/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd Front-end
          npm ci
      - name: Lint frontend
        run: |
          cd Front-end
          npm run lint || echo "No linter configured"
      - name: Run frontend tests (si gérés)
        run: |
          cd Front-end
          npm test || echo "No tests configured"
      - name: Build frontend (React)
        run: |
          cd Front-end
          npm run build
      - name: Build frontend Docker image (Nginx)
        run: |
          docker build -t stage-impot-frontend:ci-test ./Front-end
  docker-compose-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Docker Compose Build (all services)
        run: |
          docker compose -f docker-compose.yml build
  playwright-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install frontend dependencies
        run: |
          cd Front-end
          npm ci
      - name: Install Playwright Browsers
        run: |
          cd Front-end
          npx playwright install --with-deps
      - name: Run Playwright tests
        run: |
          cd Front-end
          npx playwright test

  deploy:
    name: CD Deploy to Local Docker Server
    runs-on: self-hosted
    needs: [backend-tests, frontend-tests, playwright-tests]   # adapte selon tes jobs CI !
    steps:
    # 1. Clone automatique du repo (dernière version) dans le workspace runner !
    - name: Checkout code
      uses: actions/checkout@v3
      
    # 2. (Facultatif) Build images docker à jour
    - name: Build Docker images
      run: |
        docker compose build

    # 3. Déploiement/Update des containers à partir du code checkouté
    - name: Deploy with Docker Compose
      run: |
        docker compose up -d --build

